const s = (cs, cb, t) => cs.map((c) => {
  const L1 = Math.pow(c.Y * c.Y + c.Z * c.Z, 1 / 2);
  const T1 = c.Y ? Math.atan(c.Z / c.Y) : Math.PI / 2 * (c.Z > 0 ? 1 : -1);
  return {
    ...c,
    Y: L1 * Math.cos(T1 + t / 180 * Math.PI) + cb.Y,
    Z: L1 * Math.sin(T1 + t / 180 * Math.PI) + cb.Z,
  };
});
const [coordinates, surfaces] = [
  [ { X: 50, Y:   0, Z:  50 }, { X: 50, Y:   0, Z: -50 } ], // 座面上
  [ { X: 50, Y: -20, Z:  50 }, { X: 50, Y: -20, Z: -50 } ], // 座面中
  [ { X: 50, Y: -30, Z:  50 }, { X: 50, Y: -30, Z: -50 } ], // 座面下
  [ { X: 50, Y:  30, Z:  60 }, { X: 50, Y:  35, Z:  60 }, { X: 50, Y:  40, Z:  30 }, { X: 50, Y:  40, Z: -55 }, { X: 70, Y:  40, Z: -55 }, { X: 70, Y:  40, Z:  30 }, { X: 70, Y:  35, Z:  60 }, { X: 70, Y:  30, Z:  60 } ], // 脇息上
  [ { X: 50, Y:  30, Z:  60 }, { X: 70, Y:  30, Z:  60 }, { X: 70, Y:  30, Z: -55 }, { X: 50, Y:  30, Z: -55 } ], // 脇息中
  [ { X: 50, Y:  25, Z:  60 }, { X: 70, Y:  25, Z:  60 }, { X: 70, Y:  25, Z: -55 }, { X: 50, Y:  25, Z: -55 } ], // 脇息下
  [ { X: 50, Y:  25, Z:  60 }, { X: 70, Y:  25, Z:  60 }, { X: 65, Y: -30, Z:  55 }, { X: 50, Y: -30, Z:  55 } ], // 前上柱前
  [ { X: 50, Y:  25, Z:  45 }, { X: 70, Y:  25, Z:  45 }, { X: 65, Y: -30, Z:  40 }, { X: 50, Y: -30, Z:  40 } ], // 前上柱後
  [ { X: 63, Y: -30, Z:  53 }, { X: 52, Y: -30, Z:  53 }, { X: 52, Y: -40, Z:  53 }, { X: 63, Y: -40, Z:  53 } ], // 前中柱前
  [ { X: 63, Y: -30, Z:  42 }, { X: 52, Y: -30, Z:  42 }, { X: 52, Y: -40, Z:  42 }, { X: 63, Y: -40, Z:  42 } ], // 前中柱後
  [ { X: 65, Y: -40, Z:  55 }, { X: 50, Y: -40, Z:  55 }, { X: 50, Y: -80, Z:  55 }, { X: 65, Y: -80, Z:  55 } ], // 前下柱前
  [ { X: 65, Y: -40, Z:  40 }, { X: 50, Y: -40, Z:  40 }, { X: 50, Y: -80, Z:  40 }, { X: 65, Y: -80, Z:  40 } ], // 前下柱後
  [ { X: 50, Y:  25, Z: -40 }, { X: 70, Y:  25, Z: -40 }, { X: 65, Y: -30, Z: -40 }, { X: 50, Y: -30, Z: -40 } ], // 後上柱前
  [ { X: 50, Y:  25, Z: -55 }, { X: 70, Y:  25, Z: -55 }, { X: 65, Y: -30, Z: -55 }, { X: 50, Y: -30, Z: -55 } ], // 後上柱後
  [ { X: 63, Y: -30, Z: -42 }, { X: 52, Y: -30, Z: -42 }, { X: 52, Y: -40, Z: -42 }, { X: 63, Y: -40, Z: -42 } ], // 後中柱前
  [ { X: 63, Y: -30, Z: -53 }, { X: 52, Y: -30, Z: -53 }, { X: 52, Y: -40, Z: -53 }, { X: 63, Y: -40, Z: -53 } ], // 後中柱後
  [ { X: 65, Y: -40, Z: -40 }, { X: 50, Y: -40, Z: -40 }, { X: 50, Y: -80, Z: -40 }, { X: 65, Y: -80, Z: -40 } ], // 後下柱前
  [ { X: 65, Y: -40, Z: -55 }, { X: 50, Y: -40, Z: -55 }, { X: 50, Y: -80, Z: -55 }, { X: 65, Y: -80, Z: -55 } ], // 後下柱後
  [ { X: 65, Y:  25, Z:  45 }, { X: 60, Y: -30, Z:  40 }, { X: 60, Y: -30, Z: -40 }, { X: 65, Y: 25, Z:  -40 } ], // 側面
  s([ { X: 50, Y:   0, Z:  5 }, { X: 40, Y:   0, Z:  5 }, { X: 40, Y: 160, Z:  5 }, { X: 50, Y: 160, Z:  5 } ], { Y: 0, Z: -50 }, -5), // 背凭れ前
  s([ { X: 50, Y:   0, Z: -5 }, { X: 40, Y:   0, Z: -5 }, { X: 40, Y: 160, Z: -5 }, { X: 50, Y: 160, Z: -5 } ], { Y: 0, Z: -50 }, -5), // 背凭れ後
  s([ { X: 52, Y: 160, Z:  7 }, { X: 52, Y: 190, Z:  7 }, { X: 38, Y: 190, Z:  7 }, { X: 38, Y: 160, Z:  7 } ], { Y: 0, Z: -50 }, -5), // 背凭れ装飾下前
  s([ { X: 52, Y: 160, Z: -7 }, { X: 52, Y: 190, Z: -7 }, { X: 38, Y: 190, Z: -7 }, { X: 38, Y: 160, Z: -7 } ], { Y: 0, Z: -50 }, -5), // 背凭れ装飾下後
  s([ { X: 50, Y: 190, Z:  5 }, { X: 40, Y: 190, Z:  5 }, { X: 45, Y: 208, Z:  0 } ], { Y: 0, Z: -50 }, -5), // 背凭れ装飾上前
  s([ { X: 50, Y: 190, Z: -5 }, { X: 40, Y: 190, Z: -5 }, { X: 45, Y: 208, Z:  0 } ], { Y: 0, Z: -50 }, -5), // 背凭れ装飾上後
  s([ { X: 38, Y: 160, Z:  5 }, { X: 38, Y: 180, Z:  5 }, { X:  0, Y: 208, Z:  5 }, { X:  0, Y: 180, Z:  5 } ], { Y: 0, Z: -50 }, -5), // 上面前
  s([ { X: 38, Y: 160, Z: -5 }, { X: 38, Y: 180, Z: -5 }, { X:  0, Y: 208, Z: -5 }, { X:  0, Y: 180, Z: -5 } ], { Y: 0, Z: -50 }, -5), // 上面後
].reduce((res, params, index) => {
  params.forEach((c, n) => {
    res[0][`C${index}.L${n}O`] = { ...c };
    res[0][`C${index}.R${n}O`] = { ...c, X: c.X * -1 };
    res[0][`C${index}.L${n}U`] = { ...c, Y: c.Y * -1 - 160 };
    res[0][`C${index}.R${n}U`] = { ...c, X: c.X * -1, Y: c.Y * -1 - 160 };
  });
  if (params.length > 2) {
    res[1][`C${index}.LO`] = params.map((c, n) => `C${index}.L${n}O`);
    res[1][`C${index}.RO`] = params.map((c, n) => `C${index}.R${n}O`);
    res[1][`C${index}.LU`] = params.map((c, n) => `C${index}.L${n}U`);
    res[1][`C${index}.RU`] = params.map((c, n) => `C${index}.R${n}U`);
  } else {
    res[1][`C${index}.CO`] = [ ...(params.map((c, n) => `C${index}.L${n}O`)), ...(params.map((c, n) => `C${index}.R${params.length - n - 1}O`)) ];
    res[1][`C${index}.CU`] = [ ...(params.map((c, n) => `C${index}.L${n}U`)), ...(params.map((c, n) => `C${index}.R${params.length - n - 1}U`)) ];
  }
  return res;
}, [{}, {}]);
